{"version":3,"sources":["Comps/NoteComps/2_Header.jsx","Comps/NoteComps/3_InputNote.jsx","Comps/NoteComps/4_OutputNote.jsx","Comps/NoteComps/5_Reducer.jsx","Comps/NoteComps/1_NoteApp.jsx"],"names":["Header","className","Notes","InputNote","props","note","dispatch","type","name","value","title","placeholder","autoComplete","onChange","e","target","content","isEdit","Button","onClick","Edit","Add","OutputNote","note_arr","map","style","textDecoration","id","Delete","reducer","state","action","new_note_arr","Date","getTime","toString","filter","new_title","new_content","default_state","localStorage","getItem","JSON","parse","NoteApp","useReducer","useEffect","setItem","stringify"],"mappings":"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","file":"static/js/4.f428e836.chunk.js","sourcesContent":["import { Notes } from '@material-ui/icons';\r\n\r\nexport default function Header() {\r\n    return (\r\n        <header>\r\n            <span className=\"icon\">\r\n                <Notes />\r\n            </span>\r\n            <h1>Amazing Note App</h1>\r\n        </header>\r\n    );\r\n}\r\n","import { Button } from '@material-ui/core';\r\nimport { Add, Edit } from '@material-ui/icons';\r\n\r\nexport default function InputNote(props) {\r\n    const { note, dispatch } = props;\r\n    return (\r\n        <section className=\"input-note-container\">\r\n            <input\r\n                type=\"text\"\r\n                name=\"title\"\r\n                value={note.title}\r\n                placeholder=\"type a title...     🗒️\"\r\n                autoComplete='off'\r\n                onChange={(e) =>\r\n                    dispatch({\r\n                        type: 'inputChange',\r\n                        value: e.target.value,\r\n                    })\r\n                }\r\n            />\r\n            <textarea\r\n                name=\"content\"\r\n                value={note.content}\r\n                placeholder=\"type your notes...\"\r\n                onChange={(e) =>\r\n                    dispatch({\r\n                        type: 'textareaChange',\r\n                        value: e.target.value,\r\n                    })\r\n                }\r\n            />\r\n            {note.isEdit ? (\r\n                <Button onClick={() => dispatch({ type: 'generateNote' })}>\r\n                    <Edit />\r\n                </Button>\r\n            ) : (\r\n                <Button\r\n                    onClick={() => {\r\n                        dispatch({ type: 'generateNote' });\r\n                        dispatch({ type: 'emptyVal' });\r\n                    }}\r\n                >\r\n                    <Add />\r\n                </Button>\r\n            )}\r\n        </section>\r\n    );\r\n}\r\n","import { Button } from '@material-ui/core';\r\nimport { Delete, Edit } from '@material-ui/icons';\r\nimport { useRef } from 'react';\r\n\r\nexport default function OutputNote(props) {\r\n    const { note_arr, dispatch } = props;\r\n\r\n    return (\r\n        <section className=\"output-note-container\">\r\n            {note_arr.map((note) => {\r\n                return (\r\n                    <div key={note.id}>\r\n                        <h1>{note.title}</h1>\r\n                        <p\r\n                            style={{\r\n                                textDecoration: note.isEdit\r\n                                    ? 'line-through'\r\n                                    : null,\r\n                            }}\r\n                        >\r\n                            {note.content}\r\n                        </p>\r\n                        <Button\r\n                            className=\"editBtn\"\r\n                            onClick={() =>\r\n                                dispatch({\r\n                                    type: 'editNote',\r\n                                    id: note.id,\r\n                                    title: note.title,\r\n                                    content: note.content,\r\n                                })\r\n                            }\r\n                        >\r\n                            <Edit />\r\n                        </Button>\r\n                        <Button\r\n                            className=\"deleteBtn\"\r\n                            onClick={() =>\r\n                                dispatch({ type: 'deleteNote', id: note.id })\r\n                            }\r\n                        >\r\n                            <Delete />\r\n                        </Button>\r\n                    </div>\r\n                );\r\n            })}\r\n        </section>\r\n    );\r\n}\r\n","const reducer = (state, action) => {\r\n    if (action.type === 'inputChange') {\r\n        return {\r\n            ...state,\r\n            note: { ...state.note, title: action.value },\r\n        };\r\n    }\r\n    if (action.type === 'textareaChange') {\r\n        return {\r\n            ...state,\r\n            note: { ...state.note, content: action.value },\r\n        };\r\n    }\r\n    if (action.type === 'generateNote') {\r\n        if (!state.note.title || !state.note.content) {\r\n            return { ...state };\r\n        } else if (\r\n            state.note.title &&\r\n            state.note.content &&\r\n            state.note.isEdit\r\n        ) {\r\n            let new_note_arr = state.note_arr.map((note) => {\r\n                if (note.id === state.note.id) {\r\n                    return {\r\n                        ...state,\r\n                        title: state.note.title,\r\n                        content: state.note.content,\r\n                    };\r\n                } else {\r\n                    return { ...note };\r\n                }\r\n            });\r\n            return {\r\n                ...state,\r\n                note: {\r\n                    ...state.note,\r\n                    title: '',\r\n                    content: '',\r\n                    id: '',\r\n                    isEdit: false,\r\n                },\r\n                note_arr: new_note_arr,\r\n            };\r\n        }\r\n        let id = new Date().getTime().toString();\r\n        let new_note = { ...state.note, id };\r\n        let new_note_arr = [new_note, ...state.note_arr];\r\n        return {\r\n            ...state,\r\n            note_arr: new_note_arr,\r\n        };\r\n    }\r\n    if (action.type === 'emptyVal') {\r\n        if (!state.note.title || !state.note.content) {\r\n            return { ...state };\r\n        }\r\n        return {\r\n            ...state,\r\n            note: { ...state.note, title: '', content: '' },\r\n        };\r\n    }\r\n    if (action.type === 'deleteNote') {\r\n        let new_note_arr = state.note_arr.filter((note) => {\r\n            return note.id !== action.id;\r\n        });\r\n        return {\r\n            ...state,\r\n            note_arr: new_note_arr,\r\n        };\r\n    }\r\n    if (action.type === 'editNote') {\r\n        let new_title = action.title;\r\n        let new_content = action.content;\r\n        if (state.note.title && state.note.content && state.note.isEdit) {\r\n            return {\r\n                ...state,\r\n                note: {\r\n                    ...state.note,\r\n                    title: '',\r\n                    content: '',\r\n                    isEdit: false,\r\n                    id: '',\r\n                },\r\n            };\r\n        }\r\n        return {\r\n            ...state,\r\n            note: {\r\n                ...state.note,\r\n                title: new_title,\r\n                content: new_content,\r\n                id: action.id,\r\n                isEdit: !state.note.isEdit,\r\n            },\r\n        };\r\n    }\r\n};\r\n\r\nexport default reducer;\r\n","import React, { useEffect, useReducer } from 'react';\r\nimport Header from './2_Header';\r\nimport InputNote from './3_InputNote';\r\nimport OutputNote from './4_OutputNote';\r\nimport reducer from './5_Reducer';\r\n\r\nfunction UPDATE_LOCAL_STORAGE() {\r\n    let notes;\r\n    if (localStorage.getItem('notes')) {\r\n        return (notes = JSON.parse(localStorage.getItem('notes')));\r\n    } else return (notes = []);\r\n}\r\nconst default_state = {\r\n    note: {\r\n        id: '',\r\n        title: '',\r\n        content: '',\r\n        isEdit: false,\r\n    },\r\n    note_arr: UPDATE_LOCAL_STORAGE(),\r\n};\r\n\r\nexport default function NoteApp() {\r\n    const [state, dispatch] = useReducer(reducer, default_state);\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem('notes', JSON.stringify(state.note_arr));\r\n    }, [state.note_arr]);\r\n    return (\r\n        <main>\r\n            <Header />\r\n            <InputNote note={state.note} dispatch={dispatch} />\r\n            <OutputNote note_arr={state.note_arr} dispatch={dispatch}/>\r\n        </main>\r\n    );\r\n}\r\n"],"sourceRoot":""}